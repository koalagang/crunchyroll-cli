#!/usr/bin/env bash

# AUTHOR: koalagang (https://github.com/koalagang)
# See Crunchyroll CLI's Github repository at https://github.com/koalagang/crunchyroll-cli

# Just disabling some shellcheck errors. The points made are valid but, in certain unique situations, they should be ignored.

# This is being flagged due to the examples made in the printf help statement. I'm using apostrophes on purpose because I don't want commands in this statement to actually be run.
# shellcheck disable=SC2016
# This is being flagged due to my use of variables (such as "$swallow" for example) which are being used without double quotes, however, in these cases I want bash to interpret them as
# commands and not as strings so I don't double quote.
# shellcheck disable=SC2086
# It's supposed to be `if A is true but B is false then run C`, not `if A then B else C` so bash is behaving just as I intended it to do.
# shellcheck disable=SC2015
# Not sure I really understand the point being made here.
# shellcheck disable=SC2094
# Breaks the script
# shellcheck disable=2162

# Temporary files
crunchyroll_news='/tmp/crunchyroll-news.txt'
crunchyroll_episodes='/tmp/crunchyroll-episodes.txt'
crunchyroll_source='/tmp/crunchyroll-source.txt'
crunchyroll_deps='/tmp/crunchyroll-dependencies.txt'
crunchyroll_cal='/tmp/crunchyroll-cal.txt'
crunchyroll_dates='/tmp/crunchyroll-dates.txt'
crunchyroll_weekly_eps='/tmp/crunchyroll-weekly-eps.txt'
crunchyroll_temp='/tmp/crunchyroll-temp.txt'
temp=("$crunchyroll_news" "$crunchyroll_episodes" "$crunchyroll_source" "$crunchyroll_deps" "$crunchyroll_cal" "$crunchyroll_dates" "$crunchyroll_weekly_eps" "$crunchyroll_temp")
echo "${temp[@]}" | sed 's/ /\n/g' | xargs -I% -n 1 rm -f "%" # clear all currently existing temporary files to ensure that there are no issues later on

# Dependency check
deps=('mpv' 'streamlink' 'wget' 'fzf' 'perl')
echo "${deps[@]}" | sed 's/ /\n/g' | xargs -I% -n 1 sh -c 'command -v "%" >/dev/null || echo "error: missing dependency: %" | tee "$crunchyroll_deps"'
[ -e "$crunchyroll_deps" ] && echo 'Crunchyroll CLI: install any missing dependencies and try again' && exit 1

# print a usage statement and exit if no argument is passed
[ -z "$1" ] && printf 'Crunchyroll CLI\n\nusage: crunchyroll-cli [OPTIONS] <query>\nTry `crunchyroll-cli -h` for more options.\n' && exit 1
final="${*: -1}" # the final argument (fuzzy search or URL) is stored inside a variable
# File used for watchlist (duh!); see the `-w` flag for usage:
# Also, feel free to change the filepath if you so wish. It doesn't really matter where the file is located.

## CONFIGURATION ##
# For now this is the configuration section but I'll probably set up a file in "$HOME/.config" next update or maybe later
watchlist="$HOME/.local/share/crunchyroll/watchlist.csv"
completelist="$HOME/.local/share/crunchyroll/completelist.csv" # ditto
sfeedrc="$HOME/.local/share/crunchyroll/sfeedrc"
feed="$HOME/.local/share/crunchyroll/crunchyroll-news"
webbrowser="$BROWSER"
###################

# if devour is installed then use it to swallow the terminal when launching mpv, otherwise just fork mpv from the terminal when playing
# NOTE: if the '-p' (premium) flag is passed then window swallowing is not used
command -v devour >/dev/null && swallow='devour' || swallow='setsid -f'

menu='fzf --bind ctrl-j:down --bind ctrl-k:up --tac' # set fzf as the default menu

play () {
    chosen="$(cut -d'"' -f4 "$crunchyroll_episodes" | $menu)" || exit 0
    # tail is used in case there are multiple episodes with the same number (for example if there is episode 1 of the season 1 and episode 1 of the OVA)
    url="https://crunchyroll.com$(grep -w "$chosen" "$crunchyroll_episodes" | cut -d'"' -f2 | tail -n 1)"
    [ -n "$premium" ] && read -p 'Enter crunchyroll username: ' username && streamlink "$url" best --player mpv $streamlink_sub --crunchyroll-username "$username" --crunchyroll-password '' && exit 0
    $swallow mpv $mpv_sub "$url" >/dev/null
    exit 0
}

# all the different flags available
while getopts 'hvlDds:Spw:wa:e:cnu:m:' OPT; do
  case $OPT in
      h)  printf '\nCrunchyroll CLI\n\nusage: crunchyroll-cli [OPTIONS] <query>\n\n\tIn the <anime> field, you may pass the link to a series or an episode or perform a fuzzy search.\n\tNOTE: when performing a search, it is necessary to use apostrophes or quotation marks otherwise you could end up with something like this:\n\t`crunchyroll-cli that time` would only search for `time` and not `that time`.\n\n\tBelow are examples of the correct usage.\n\texample: crunchyroll-cli "that time"\n\texample: crunchyroll-cli "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime"\n\texample: crunchyroll-cli "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime/episode-1-the-storm-dragon-veldora-777519"\n\n\tAvailable flags:\n\n\t-h\tprint this help statement and exit\n\n\t-v\tprint the Crunchyroll CLI version and exit\n\n\t-l\tprint license info and exit\n\n\t-D\tprint a list of the dependencies and exit\n\n\t-d\tdownload instead of streaming (requires youtube-dl)\n\n\t-s\tshow subtitles in your chosen language\n\t\tIf not specified, no subtitles are shown.\n\t\tNOTE: due to the functionality of streamlink, you cannot turn off subtitles *when viewing premium content*; if not specified streamlink will use your system locale.\n\t\texample: crunchyroll-cli -s enUS "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime"'
          printf '\n\n\t-S\tlist available subtitle languages and exit\n\n\t-p\tplay premium content\n\t\tRequires signing into a premium Crunchyroll account - you will be prompted with username and password fields.\n\t\tNOTE: you cannot download premium content.\n\n\t-w\tplay an anime from your watchlist\n\t\tYou will be prompted to select an anime.\n\t\tAfter playing an episode, your watchlist will automatically update so that next time it will play the next episode.\n\t\tNOTE: requires at least two anime in your watchlist for Crunchyroll CLI to act as expected.\n\t\texample: crunchyroll-cli -w\n\n\t-a\tadd an anime to your watchlist (and the next episode to watch followed by the total number of episodes)\n\t\tNOTE: if you are unsure how many episodes are left then set the number to "NULL".\n\t\texample: crunchyroll-cli -a 11,13 "https://www.crunchyroll.com/higehiro-after-being-rejected-i-shaved-and-took-in-a-high-school-runaway"\n\t\texample: crunchyroll-cli -a 25,NULL "https://www.crunchyroll.com/one-piece"\n\n\t-e\tmanually your watchlist or completelist\n\t\tUses "$EDITOR".\n\t\tYou can use the full word (i.e. "watchlist" or "completelist") or you can use the first letter (i.e. "w" or "c").\n\t\texample: crunchyroll-cli -e watchlist\n\t\texample: crunchyroll-cli -e c\n\n\t-c\tcheck the simulcast schedule for this week\n\t\texample: crunchyroll-cli -c (free episodes)\n\t\texample: crunchyroll-cli -pc (premium episodes)\n\n\t-n\tcheck Crunchyroll news (requires sfeed)\n\n\t-u\tdo a fuzzy search and get the URL of an anime\n\t\texample: crunchyroll -u "that time i got reincarnated as a slime"\n\t\toutput: https://www.crunchyroll.com/en-gb/that-time-i-got-reincarnated-as-a-slime\n\n\t-m\tspecify menu application to use\n\t\tIf not specified, fzf is used.\n\t\tYou can use any software which can be piped into and out of and used as a menu but it is recommended that you choose between dmenu, rofi and fzf.\n\t\texample: crunchyroll-cli -m dmenu "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime"\n\nReport bugs at https://github.com/koalagang/crunchyroll-cli/issues\n'
        exit 0 ;;
    v)  echo 'Crunchyroll CLI version: v1.8'
        exit 0 ;;
    l)  printf '\ncrunchyroll-cli Copyright (C) 2021 koalagang. License GPLv3: This program comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it under certain conditions;\nfor more information, please refer to <https://github.com/koalagang/crunchyroll-cli/blob/main/LICENSE>.\n'
        exit 0 ;;
    D)  printf 'Crunchyroll CLI\n\nDependencies:\nmpv\nstreamlink\nwget\nperl\ndevour (optional - for window swallowing)\nyoutube-dl (optional - for downloading episodes)\nfzf\nan additional menu application (optional - recommended: dmenu or rofi)\nsfeed (optional - for viewing Crunchyroll news)\n'
        exit 0 ;;
    d)  [ -n "$premium" ] && \
        printf "error: you can't download premium content\n\nRemove the '-d' flag to be able to stream premium content.\nIf you wish to download free content then remove the '-p' flag.\n" && exit 0
        youtube-dl "$final" && echo 'Episode successfully downloaded.' || echo 'error: failed to download'
        download=1
        exit 0 ;;
    s)  mpv_sub="--slang=$OPTARG"
        streamlink_sub="--locale ${OPTARG:0:2}_${OPTARG:2}" ;;
    S)  printf 'Crunchyroll CLI\n\nAvailable subtitle languages:\narME\ndeDE\nenUS\nesES\nesLA\nfrFR\nitIT\nptBR\nruRU\n' && exit 0 ;;
    p)  [ -n "$download" ] && \
        printf "error: you can't download premium content\n\nRemove the '-d' flag to be able to stream premium content.\nIf you wish to download free content then remove the '-p' flag.\n" && exit 0
        premium=1 ;;
    w)  anime="$(cut -d',' -f1 "$watchlist" | $menu)" || exit 0
        episode="$(grep "$anime" "$watchlist" | cut -d',' -f3)"
        url="$(grep "$anime" "$watchlist" | cut -d',' -f2)"
        last_ep="$(grep "$anime" "$watchlist" | cut -d',' -f4)"
        wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "$url" | grep -w -E "href.*Episode $episode" | tail -n 1 > "$crunchyroll_episodes"
        ep_url="https://crunchyroll.com$(grep -w "Episode $episode" "$crunchyroll_episodes" | cut -d'"' -f2 | tail -n 1)"
        [ -n "$download" ] && youtube-dl "$ep_url" && echo 'Episode successfully downloaded.' || echo 'error: failed to download' && exit 0 # download episode and exit if `-d` is passed
        [ -n "$premium" ] && printf 'Enter crunchyroll username: ' && read -r username && streamlink "$ep_url" best --player mpv $streamlink_sub --crunchyroll-username "$username" --crunchyroll-password '' \
            && exit 0
        $swallow mpv $mpv_sub "$ep_url" >/dev/null
        # change the next episode to one later (e.g. if the above playing episode is episode 2, then the watchlist will be changed so that the next episode is episode 3)
        sed -i "/$anime/d" $watchlist
        episode="$((episode + 1))"
        [ "$last_ep" != 'NULL' ] && [[ "$episode" -gt "$last_ep" ]] && echo "$anime,$url" >> "$completelist" && exit 0
        echo "$anime,$url,$episode,$last_ep" >> "$watchlist"
        exit 0 ;;
    a)  [ -d "$watchlist" ] && mkdir "$watchlist" # make the watchlist directory if it does not exist
        url="$final"
        # the perl command here finds the title of the URL's page
        anime="$(wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "$url" | perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si' | recode html.. | iconv -c -f utf-8 -t ascii | sed 's/ - Watch on Crunchyroll//')"
        episode="$OPTARG"
        echo "$anime,$url,$episode" >> "$watchlist"
        exit 0 ;;
    e)  case "$OPTARG" in
            'watchlist')    $EDITOR "$watchlist"    ;;
            'completelist') $EDITOR "$completelist" ;;
            'w')            $EDITOR "$watchlist"    ;;
            'c')            $EDITOR "$completelist" ;;
            *) printf 'Crunchyroll CLI\n\nerror: no such file'
        esac
        exit 0 ;;
    c)  [ -z "$premium" ] && filter='free' || filter='premium'
        wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "https://www.crunchyroll.com/simulcastcalendar?filter=$filter" | grep -A4 'data-slug' > "$crunchyroll_source"

        grep '<time datetime="*"' "$crunchyroll_source" | sed -e 's/<time datetime="//g' -e 's/class="available-time">//g' -e 's#</time>##g' | tr -d '"[:blank:]' > "$crunchyroll_dates"
        num="$(wc -l "$crunchyroll_dates" | cut -d' ' -f1)"
        until [ "$num" -eq 0 ]; do
            date="$(sed -n "$num"p "$crunchyroll_dates")"
            date="${date%%T*}"
            IFS='-' read -ra ADDR <<< "$date"
            formattedDate=${ADDR[0]}-${ADDR[2]}-${ADDR[1]}
            printf "$(date -d $formattedDate +%A)   \t%s$date\n" >> "$crunchyroll_temp"
            num="$((num - 1))"
        done
        cat "$crunchyroll_temp" > "$crunchyroll_dates"

        grep 'data-slug="*"' "$crunchyroll_source" | sed -e 's/data-slug=//g' -e '/showSlug/d' | tr -d '"[:blank:]' > "$crunchyroll_weekly_eps"
        num="$(wc -l "$crunchyroll_weekly_eps" | cut -d' ' -f1)"
        until [ "$num" -eq 0 ]; do
            # shellcheck disable=SC2059
            printf "$(sed -n "$num"p "$crunchyroll_dates")\t" >> "$crunchyroll_cal"
            sed -n "$num"p "$crunchyroll_weekly_eps" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1' >> "$crunchyroll_cal"
            num="$((num - 1))"
        done

        printf "%s\n\nDAY\t\tDATE\t\tANIME\n---------------------------------------------------------------\n" "$filter"
        cat "$crunchyroll_cal"
        exit 0 ;;
    n)  [ -d "$sfeedrc" ] || printf 'sfeedpath="$HOME/.local/share/crunchyroll"\nfeeds(){\n\tfeed "crunchyroll-news" "https://www.crunchyroll.com/newsrss"\n}' > "$sfeedrc"
        sfeed_update "$sfeedrc" 2>/dev/null
        sfeed_plain "$feed" | iconv -c -f utf-8 -t ascii | sed -e 's/ \+ /,/g' -e 's/ //' -e 's/ //' -e 's/ http/,http/g' | cut -c2- | cut -d',' -f2 --complement \
            | awk -F',' 'NF==3 {print}' > "$crunchyroll_news"
        choice="$(cut -d',' -f3 --complement "$crunchyroll_news" | sed -e 's/.\{10\}/& /' -e 's/,/\t/g' | fzf | sed -e 's/\t/,/' -e 's/ //')"
        grep "$choice" "$crunchyroll_news" | cut -d',' -f3 | xargs $swallow $webbrowser >/dev/null
        exit 0 ;;
    u)  [[ "$OPTARG" =~ 'https://' ]] && echo 'there is nothing to do' && exit 0
        [[ "$OPTARG" =~ 'https://' ]] || url="$(wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "https://www.crunchyroll.com/search?from=&q=$OPTARG" | grep '<span class="type">' \
            | sed -e 's/<span class="type">//g' -e 's/[ \t]*//' | $menu | awk '{$1=$1};1' | tr -d '[:punct:]' | sed 's/ /-/g' | xargs -I% echo 'https://crunchyroll.com/%')"
        echo "$url"
        while true; do
            read -p 'Add to watchlist? [y/n] ' yn
            case $yn in
                [Yy]* ) read -p 'Which episode are you currently on? (next one to watch) ' ep && read -p "How many episodes are in the anime? (if you don't know, enter 'NULL') " final_ep && \
                    crunchyroll-cli -a "$ep,$final_ep" "$url" ; break ;;
                [Nn]* ) exit ;;
                * ) echo 'Please answer yes or no.'
            esac
        done
        exit 0 ;;
    m)  case "$OPTARG" in
            dmenu)  menu='dmenu -i -l 20' ;;
            rofi)   menu='rofi -dmenu -i -l 20' ;;
            fzf)    menu='fzf --bind ctrl-j:down ctrl-k:up --tac' ;;
            *)      menu="$OPTARG"
        esac ;;
    *)  printf '\nCrunchyroll CLI\n\nusage: crunchyroll-cli [OPTIONS] <query>\nTry `crunchyroll-cli -h` for more options.\n'
        exit 0
  esac
done

shopt -s extglob # to allow the case statement to search for any string containing 'https://' at the beginning
case "$final" in
    @(https://)* )   streamlink --can-handle-url "$final" && playable=1
        [ -n "$playable" ] && [ -n "$premium" ] && read -p 'Enter crunchyroll username: ' username && streamlink "$final" best --player mpv $streamlink_sub --crunchyroll-username "$username" --crunchyroll-password '' && exit 0
        [ -n "$playable" ] && [ -z "$premium" ] && $swallow mpv $mpv_sub "$final" && exit 0
        wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "$final" | grep 'href.*Episode' > "$crunchyroll_episodes" && play ;;
    *)  wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "https://www.crunchyroll.com/search?from=&q=$final" | grep '<span class="type">' \
    | sed -e 's/<span class="type">//g' -e 's/[ \t]*//' | tee "$crunchyroll_episodes" | $menu | awk '{$1=$1};1' | sed 's/ /-/g' \
    | xargs -I% wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "https://crunchyroll.com/%" | grep -E 'href.*Episode' > "$crunchyroll_episodes" && play
esac
