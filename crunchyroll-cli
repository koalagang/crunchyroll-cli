#!/usr/bin/env bash

# AUTHOR: koalagang (https://github.com/koalagang)
# See Crunchyroll CLI's Github repository at https://github.com/koalagang/crunchyroll-cli

# print a usage statement and exit if no argument is passed
[ -z "$1" ] && printf 'Crunchyroll CLI\n\nusage: crunchyroll-cli [OPTIONS] "<anime>"\nTry `crunchyroll-cli -h` for more options.\n' && exit 0

final="$(echo "${@: -1}")"
watchlist="$HOME/.local/share/crunchyroll/watchlist.csv"
# if devour is installed then use it to swallow the terminal when launching mpv, otherwise just fork mpv from the terminal when playing
command -v devour >/dev/null && swallow='devour' || swallow='setsid -f'
[ -n "$menu" ] || menu='fzf' # if no menu is set then set it to be fzf

play () {
    chosen="$(cut -d'"' -f4 "/tmp/crunchyroll_episodes.txt" | $menu)"
    # tail is used in case there are multiple episodes with the same number (for example if there is episode 1 of the season 1 and episode 1 of the OVA)
    url="https://crunchyroll.com$(grep -w "$chosen" "/tmp/crunchyroll_episodes.txt" | cut -d'"' -f2 | tail -n 1)"
    [ -n "$premium" ] && printf 'Enter crunchyroll username: ' && read -r username && streamlink "$url" best --player mpv $streamlink_sub --crunchyroll-username "$username" --crunchyroll-password '' \
        && exit 0
    $swallow mpv $mpv_sub "$url" >/dev/null
    exit 0
}

while getopts 'hvd:Ds:Spwa:wm:' OPT; do
  case $OPT in
    h)  printf '\nCrunchyroll CLI\n\nusage: crunchyroll-cli [OPTIONS] "<anime>"\n\n\tIn the <anime> field, you may pass the link to a series or an episode or perform a fuzzy search.\n\tNOTE: when performing a search, it is necessary to use apostrophes or quotation marks otherwise you could end up with something like this:\n\t`crunchyroll-cli that time` would only search for `time` and not `that time`.\n\n\tBelow are examples of the correct usage.\n\texample: crunchyroll-cli "that time"\n\texample: crunchyroll-cli "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime"\n\texample: crunchyroll-cli "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime/episode-1-the-storm-dragon-veldora-777519"\n\n\tAvailable flags:\n\n\t-h\tprint this help statement and exit\n\n\t-v\tprint the Crunchyroll CLI version and exit\n\n\t-d\tdownload instead of streaming\n\n\t-D\tprint a list of the dependencies and exit\n\n\t-s\tshow subtitles in your chosen language (if not specified, no subtitles are shown)\n\t\tNOTE: due to the functionality of streamlink, you cannot turn off subtitles *when viewing premium content*; if not specified streamlink will use your system locale.\n\t\texample: crunchyroll-cli -s enUS "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime"\n\n\t-S\tlist available subtitle languages and exit\n\n\t-p\tplay premium content (requires signing into a premium Crunchyroll account - you will be prompted with username and password fields)\n\t\tNOTE: you cannot download premium content.\n\n\t-w\tplay an anime from your watchlist (you will be prompted to select an anime) - requires at least two anime in your watchlist for Crunchyroll CLI to act as expected\n\t\texample: crunchyroll-cli -w\n\n\t-a\tadd an anime to your watchlist (and the next episode to watch)\n\t\tNOTE: you can manually edit the watchlist file as well (default location is ~/.local/share/crunchyroll/watchlist.csv)\n\t\texample: crunchyroll-cli -a 40 "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime"\n\n\t-m\tspecify menu application to use (if not specified, fzf is used)\n\t\tYou can use any software which can be piped into and out of and used as a menu but it is recommended that you choose between dmenu, rofi and fzf.\n\t\texample: crunchyroll-cli -m dmenu "https://www.crunchyroll.com/that-time-i-got-reincarnated-as-a-slime"\n\nReport bugs at https://github.com/koalagang/crunchyroll-cli/issues\n'
        exit 0 ;;
    v)  echo "Crunchyroll CLI version: v1.3"
        exit 0 ;;
    d)  [ -n "$premium" ] && \
        printf "error: you can't download premium content\n\nRemove the '-d' flag to be able to stream premium content.\nIf you wish to download free content then remove the '-p' flag.\n" && exit 0
        youtube-dl "$OPTARG" && echo "Episode successfully downloaded."
        download=1
        exit 0 ;;
    D)  printf 'Crunchyroll CLI\n\nDependencies:\nmpv\nstreamlink\nwget\ndevour (optional - for window swallowing)\nyoutube-dl (optional - for downloading episodes)\na menu application (recommended: fzf or dmenu or rofi)\n'
        exit 0 ;;
    s)  mpv_sub="--slang=$OPTARG"
        streamlink_sub="--locale ${OPTARG:0:2}_${OPTARG:2}" ;;
    S)  printf 'Crunchyroll CLI\n\nAvailable subtitle languages:\narME\ndeDE\nenUS\nesES\nesLA\nfrFR\nitIT\nptBR\nruRU\n' && exit 0 ;;
    p)  [ -n "$download" ] && \
        printf "error: you can't download premium content\n\nRemove the '-d' flag to be able to stream premium content.\nIf you wish to download free content then remove the '-p' flag.\n" && exit 0
        premium=1 ;;
    w)  anime="$(cut -d',' -f1 "$watchlist" | $menu)"
        url="$(grep "$anime" "$watchlist" | cut -d',' -f2)"
        episode="$(grep "$anime" "$watchlist" | cut -d',' -f3)"
        wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "$url" | grep 'href' | grep -w "Episode $episode" | tail -n 1 > "/tmp/crunchyroll_episodes.txt"
        url="https://crunchyroll.com$(grep -w "Episode $episode" "/tmp/crunchyroll_episodes.txt" | cut -d'"' -f2 | tail -n 1)"
        [ -n "$download" ] && youtube-dl "$url" && echo "Episode successfully downloaded." && exit 0 # download episode and exit if `-d` is passed
        [ -n "$premium" ] && printf 'Enter crunchyroll username: ' && read -r username && streamlink "$url" best --player mpv $streamlink_sub --crunchyroll-username "$username" --crunchyroll-password '' \
            && exit 0
        $swallow mpv $mpv_sub "$url" >/dev/null
        exit 0 ;;
    a)  [ -d "$watchlist" ] && mkdir "$watchlist"
        url="$final"
        anime="$(wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "$url" | perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si' | recode html.. | iconv -c -f utf-8 -t ascii | sed 's/ - Watch on Crunchyroll//')"
        episode="$OPTARG"
        echo "$anime,$url,$episode" >> "$watchlist"
        exit 0 ;;
    m)  case "$OPTARG" in
            dmenu)  menu='dmenu -i -l 20' ;;
            rofi)   menu='rofi -dmenu -i -l 20' ;;
            *)      menu="$OPTARG"
        esac ;;
    *)  printf '\nCrunchyroll CLI\n\nusage: crunchyroll-cli [OPTIONS] "<anime>"\nTry `crunchyroll-cli -h` for more options.\n'
        exit 0
  esac
done

# if the argument does not contain 'https://' then perform a search of using the input string
[[ "$final" =~ 'https://' ]] || ( wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "https://www.crunchyroll.com/search?from=&q=$final" | grep '<span class="type">' \
    | sed -e 's/<span class="type">//g' -e 's/[ \t]*//' > "/tmp/crunchyroll_episodes.txt" && cat "/tmp/crunchyroll_episodes.txt" | $menu | awk '{$1=$1};1' | sed 's/ /-/g' \
    | xargs -I{} wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "https://crunchyroll.com/{}" | grep 'href' | grep "Episode" > "/tmp/crunchyroll_episodes.txt" && play )

# if the argument does contain 'https://' then provide a list of episodes to choose from
[[ "$final" =~ 'https://' ]] && streamlink --can-handle-url "$final" && $swallow mpv $mpv_sub "$final" >/dev/null || ( wget -qO- robots=off -U mozilla --no-dns-cache --no-cache "$final" \
    | grep 'href' | grep "Episode" > "/tmp/crunchyroll_episodes.txt" && play )
